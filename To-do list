import tkinter as tk
from tkinter import messagebox

# Function to add a task to the to-do list
def add_task():
    task = entry_task.get(1.0,tk.END)
    description = entry_description.get(1.0,tk.END)
    due_date = entry_due_date.get(1.0,tk.END)
    
    if task and due_date:
        task_list.insert(tk.END,f"Task: {task}, Description: {description}, Due Date: {due_date}")
        entry_task.delete(1.0, tk.END)
        entry_description.delete(1.0, tk.END)
        entry_due_date.delete(1.0, tk.END)
    else:
        messagebox.showwarning("Warning", "Task and Due Date cannot be empty!")
    
        

# Function to delete a selected task from the to-do list
def delete_task():
    try:
        task_list.delete(task_list.curselection())
    except:
        messagebox.showwarning("Warning", "Please select a task to delete!")

# Function to display all tasks in the to-do list
def display_tasks():
    tasks = task_list.get(0, tk.END)
    if not tasks:
        messagebox.showinfo("Info", "The to-do list is empty.")
    else:
        messagebox.showinfo("To-Do List", "\n".join(tasks))

# Function to update a task in the to-do list
def update_task():
    selected_task = task_list.get(tk.ACTIVE)
    updated_task = entry_task.get(1.0,tk.END)
    updated_task1 = entry_description.get(1.0,tk.END)
    updated_task2 = entry_due_date.get(1.0,tk.END)
    if selected_task and updated_task:
        task_list.delete(task_list.curselection())

        task_list.insert(tk.END,f"Task: {updated_task}, Description: {updated_task1}, Due Date: {updated_task2}")
        
        entry_task.delete(1.0, tk.END)
        entry_description.delete(1.0,tk.END)
        entry_due_date.delete(1.0,tk.END)
    else:
        messagebox.showwarning("Warning", "Please select a task and provide an updated task!")
def complete():
    select= task_list.curselection()
    complete=task_list.get(select)
    task_list.delete(select)
    complete_list.insert(tk.END,complete)

# Create the main window
app = tk.Tk()
app.title("To-Do List App")
app.config(background="light grey")
app.geometry("1100x600")
app.minsize(width=1100,height=600)

head=tk.Label(app,text="To-Do List",font="arial 20 bold",background="orange",fg="black")
head.pack(side="top",fill="both")

# Create a listbox to display tasks

task_list = tk.Listbox(app, selectmode=tk.SINGLE,bd=5,width=70,height=8,font="arial 15 bold")
scrollbar=tk.Scrollbar(app,orient="vertical")
task_list.config(yscrollcommand=scrollbar.set)
scrollbar.config(command=task_list.yview)
task_list.place(x=300,y=90)

add_label = tk.Label(app,text="Add/Update Task",font="arial 15 bold",background="orange",fg="black")
add_label.place(x=24,y=54)

text_label=tk.Label(app,text="Tasks",font="arial 15 bold",bg="orange",fg="black")
text_label.place(x=350,y=54)

complete_label=tk.Label(text="Completed Tasks",font="arial 15 bold",bg="orange",fg="black")
complete_label.place(x=330,y=320)

complete_list=tk.Listbox(app,selectmode=tk.SINGLE,font="arial 12 bold italic",bd=5,width=86,height=10)
scrollbar1=tk.Scrollbar(app,orient="vertical")
complete_list.config(yscrollcommand=scrollbar1.set)
scrollbar1.config(command=complete_list.yview)
complete_list.place(x=300,y=380)

task_label=tk.Label(text="Task",font="arial 15 bold",bg="orange")
discription_label=tk.Label(text="Discription",font="arial 15 bold",bg="orange")
due_date_label=tk.Label(text="Due date",font="arial 15 bold",bg="orange")

task_label.place(x=24,y=100)
discription_label.place(x=24,y=180)
due_date_label.place(x=24,y=300)

# Create entry widgets to add, update, and display tasks
entry_task = tk.Text(app,bd=5, width=30,height=2)
entry_description = tk.Text(app, width=30,height=4,bd=5)
entry_due_date = tk.Text(app,height=2 ,width=30,bd=5)

entry_task.place(x=20,y=140)
entry_description.place(x=20,y=220)
entry_due_date.place(x=20,y=340)

# Create buttons for adding, deleting, displaying, and updating tasks
add_button = tk.Button(app, text="Add Task", command=add_task,bd=3,width=12,bg="orange")
delete_button = tk.Button(app, text="Delete Task", command=delete_task,bd=3,width=12,bg="orange")
display_button = tk.Button(app, text="Display Tasks", command=display_tasks,bd=3,width=12,bg="orange")
update_button = tk.Button(app, text="Update Task", command=update_task,bd=3,width=12,bg="orange")
complete_button = tk.Button(app,text="Task Completed",command=complete,bd=3,width=12,bg="orange")

add_button.place(x=24,y=400)
delete_button.place(x=130,y=400)
display_button.place(x=24,y=430)
update_button.place(x=130,y=430)
complete_button.place(x=24,y=460)

app.mainloop()
     
            
    
